#!/usr/bin/env ruby

require 'json'
require 'fileutils'

MESSAGES = {}

MESSAGES['possible_key_check'] = <<-EOL
MySQL reported that it had keys it could have used, but elected not to use them.
Shiba checked each of the possible keys and returned the results from the best
key possible.  Sometimes "possible_keys" will be inaccurate and no keys were possible.
EOL

MESSAGES['access_type_const'] = <<-EOL
This query selects at *most* one row, which is about as good as things get.
EOL

MESSAGES['access_type_ref'] = <<-EOL
This query uses an index to find rows that match a single value.  Often this
has very good performance, but it depends on how many rows match that value.
EOL

MESSAGES['access_type_range'] = <<-EOL
This query uses an index to find rows that match a range of values, for instance
`WHERE indexed_value in (1,2,5,6)` or `WHERE indexed_value >= 5 AND indexed_value <= 15`.
It's very hard to estimate how many rows this query will consider in production, so we've
upped the cost of this query.
EOL

MESSAGES['access_type_tablescan'] = <<-EOL
This query doesn't use any indexes to find data.  You should be scared here.
This *can* be utterly fine if, say, you're querying a tiny table (less than ~500 rows),
but be aware that if this table is not effectively tiny or constant-sized you're entering
a world of pain.
EOL

MESSAGES['fuzzed_data'] = <<-EOL
There wasn't enough data in your environment to adequately measure this query, so we
pretended that there were rows in the table.  To improve results, please dump your
index statistics into Shiba.
EOL

res = []
while line = $stdin.gets
  json = JSON.parse(line)
  res << json
end

path = File.dirname(__FILE__) + "/../web"
js = Dir.glob(path + "/*.js").map { |f| File.basename(f) }
data = {
  js: js,
  queries: res,
  messages: MESSAGES
}

require 'erb'

FileUtils.mkdir_p("/tmp/shiba_results/js")
js.each do |f|
  system("cp #{path}/#{f} /tmp/shiba_results/js")
end
system("cp #{path}/*.css /tmp/shiba_results")


erb = ERB.new(File.read(File.dirname(__FILE__) + "/../web/results.html.erb"))
File.open("/tmp/shiba_results/results.html", "w+") do |f|
  f.write(erb.result(binding))
end


