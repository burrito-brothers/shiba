#!/usr/bin/env ruby

require 'bundler/setup'
require 'json'

require 'optionparser'

#git diff --name-only --cached

MAGIC_COST = 100

options = {}
parser = OptionParser.new do |opts|
  # note that the key to the hash needs to stay the same as the
  # option name since we re-pass them
  opts.on("-f","--file FILE", "Explain output log to compare against") do |f|
    options["file"] = f
  end

  opts.on("--staged", "Only check files that are staged for commit") do
    options["staged"] = true
  end

  opts.on("--unstaged", "Only check files that are not staged for commit") do
    options["unstaged"] = true
  end

  opts.on("--last-explain", "Use the latest explain log in /tmp/") do
    options["file"] = Dir.glob("/tmp/shiba-explain*").sort.last
  end

  opts.on("--verbose", "Verbose/debug mode") do
    options["verbose"] = true
  end
end
parser.parse!

# This is a noop since it's the default behavior. Ignore.
if options["staged"] && options["unstaged"]
  options.delete("staged")
  options.delete("unstaged")
end

cmd = case
when options["staged"]
  " --staged"
when options["unstaged"]
  ""
else
  " HEAD"
end

changes = `git diff#{cmd} --name-only`

explains = options["file"]

if explains.nil? || !File.exist?(explains)
  $stderr.puts "Specify an explain log, or run shiba explain to generate one."
  puts parser.banner
  exit 1
end

patterns = changes.split("\n").map { |path| "-e #{path}" }.join(" ")
json_lines = `grep #{explains} #{patterns}`
explains = json_lines.each_line.map do |line|
  JSON.parse(line)
end

problems = explains.select { |explain| explain["cost"] && explain["cost"] > MAGIC_COST }

problem_lines = problems.map {|p| [ p["backtrace"].first, p["sql"] ] }

# TODO:
# 1. only fail when the line itself intersects with a diff
# 2. print the first file:line that failed
if problem_lines.empty?
  exit
end

$stderr.puts("Potential problems:")
$stderr.puts("")
problem_lines.each do |problem|
  sql = problem[1]
  sql.sub!(/select .*? where/i, '')
  line =  "#{File.basename(problem[0])}\t#{sql}"
  if line.length > 80
    line = line[0,80]
  end
  puts line
end

exit 3