#!/usr/bin/env ruby

require 'bundler/setup'
require 'optionparser'
require 'shiba/reviewer'
require 'shiba/checker'

options = {}
parser = OptionParser.new do |opts|
  opts.banner = "Review changes for query problems. Optionally submit the comments to a Github pull request."

  opts.separator "Required:"

  opts.on("-f","--file FILE", "The explain output log to compare with") do |f|
    options["file"] = f
  end

  opts.separator ""
  opts.separator "Git diff options:"

  opts.on("-b", "--branch GIT_BRANCH", "Compare to changes between HEAD and BRANCH") do |b|
    options["branch"] = b
  end

  opts.on("--staged", "Only check files that are staged for commit") do
    options["staged"] = true
  end

  opts.on("--unstaged", "Only check files that are not staged for commit") do
    options["unstaged"] = true
  end

  opts.separator ""
  opts.separator "Github options:"

  opts.on("--submit", "Submit comments to Github") do
    options["submit"] = true
  end

  opts.on("-p", "--pull-request PR_ID", "The ID of the pull request to comment on") do |p|
    options["pull_request"] = p
  end

  opts.on("-t", "--token TOKEN", "The Github API token to use for commenting") do |t|
    options["token"] = t
  end

  opts.separator ""
  opts.separator "Common options:"

  opts.on("--verbose", "Verbose/debug mode") do
    options["verbose"] = true
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end

  opts.on_tail("--version", "Show version") do
    require 'shiba/version'
    puts Shiba::VERSION
    exit
  end
end
parser.parse!

# This is a noop since it's the default behavior. Ignore.
if options["staged"] && options["unstaged"]
  options.delete("staged")
  options.delete("unstaged")
end

log = options["file"]

if log.nil?
  $stderr.puts "Provide an explain log, or run 'shiba explain' to generate one."
  $stderr.puts ""
  $stderr.puts parser
  exit 1
end

if !File.exist?(log)
  $stderr.puts "File not found: '#{log}'"
  exit 1
end

if options["branch"] == nil
  options["branch"] = ENV['TRAVIS_PULL_REQUEST_SHA']
end

if options["token"] == nil
  options["token"] = ENV['GITHUB_TOKEN']
end

if options["pull_request"] == nil
  options["pull_request"] = ENV['TRAVIS_PULL_REQUEST']
end

repo_cmd = "git config --get remote.origin.url"
repo_url = `#{repo_cmd}`.chomp

if options["verbose"]
  $stderr.puts "#{repo_cmd}\t#{repo_url}"
end


def require_option(parser, name)
  $stderr.puts "Required: #{name}"
  $stderr.puts ""
  $stderr.puts parser
  exit 1
end

if options["file"].nil?
  require_option(parser, "file", "No explain log file provided")
end

if repo_url.empty?
  $stderr.puts "'#{Dir.pwd}' does not appear to be a git repo"
  exit 1
end

if options["submit"]
  #require_option(options["branch"], "No branch sha provided")
  require_option(parser, "token") if options["token"].nil?
  require_option(parser, "pull_request") if options["pull_request"].nil?
end

# Check to see if the log overlaps with the git diff
result = Shiba::Checker.new(options).run(log)

if result.message
  $stderr.puts result.message
end

if result.status == :pass
  $stderr.puts "No problems found" if options["verbose"]
  exit
end

# Generate comments for the problem queries
reviewer = Shiba::Reviewer.new(repo_url, result.problems, options)

if options["submit"]
  if reviewer.repo_host.empty? || reviewer.repo_path.empty?
    $stderr.puts "Invalid repo url '#{repo_url}' from git config --get remote.origin.url"
    exit 1
  end

  reviewer.post_comments
end

reviewer.comments.each do |c|
  puts "#{c[:path]}:#{c[:line]} (#{c[:position]})"
  puts c[:body]
  puts ""
end

exit 2