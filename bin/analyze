#!/usr/bin/env ruby

#!/usr/bin/env ruby

require 'optionparser'
require 'shiba/configure'

options = {}
parser = OptionParser.new do |opts|
  opts.banner = "analyze <command>. Creates report of SQL from the running process."

  opts.on("-h","--host HOST", "sql host") do |h|
    options["host"] = h
  end

  opts.on("-d","--database DATABASE", "sql database") do |d|
    options["database"] = d
  end

  opts.on("-u","--user USER", "sql user") do |u|
    options["user"] = u
  end

  opts.on("-p","--password PASSWORD", "sql password") do |p|
    options["password"] = p
  end

  opts.on("-i","--index INDEX", "index of query to inspect") do |i|
    options["index"] = i.to_i
  end

  opts.on("-l", "--limit NUM", "stop after processing NUM queries") do |l|
    options["limit"] = l.to_i
  end

  opts.on("-s","--stats FILES", "location of index statistics tsv file") do |f|
    options["stats_file"] = f
  end

  opts.on("-f", "--file FILE", "location of file containing queries") do |f|
    options["file"] = f
  end

  opts.on("-o", "--output FILE", "write to file instead of stdout") do |f|
    options["output"] = f
  end

end

# Automagic configuration goes here
if !options["database"]
    config = Shiba::Configure.activerecord_configuration
  
    if tc = config && config['test']
      $stderr.puts "Reading configuration from '#{`pwd`.chomp}/config/database.yml'[:test]."
      options['host']     ||= tc['hostname']
      options['database'] ||= tc['database']
      options['user'] ||= tc['username']
      options['password'] ||= tc['password']
    end
  end
  
  if !options["file"]
    options["file"] = `mktemp /tmp/shiba-query.log-#{Time.now.to_i}`.chomp
  end

  if !options["output"]
    options["output"] = `mktemp /tmp/shiba-explain.log-#{Time.now.to_i}`.chomp
  end

parser.parse!

# Log process queries
path = "#{File.dirname(__FILE__)}/watch.rb"
watch_args = ARGV + [ "--file", options["file"] ]
system(path, *watch_args)

# Explain
$stderr.puts "Analyzing SQL to '#{options["output"]}'..."
path = "#{File.dirname(__FILE__)}/explain"
args = options.select { |_,v| !v.nil? }.map { |k,v| [ "--#{k}", v ] }.flatten
system(path, *args)

# Decipher 
system("#{File.dirname(__FILE__)}/decipher", :in => options["output"])