<html>
  <head>
    <title>Shiba results for <%= Time.now %></title>
    <% data[:js].each do |js| %>
      <script type="text/javascript" src="./js/<%= js %>"></script>
    <% end %>
    <link rel="stylesheet" href="bootstrap.min.css">
    <link href="https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900|Material+Icons" rel="stylesheet">
  </head>
  <body>
    <script language="javascript">
      var data = <%= data.to_json %>;
      var byTable = {};
      var byTableLow = {};
      var queriesByTable = [];
      data.queries.forEach(function(query) {
        query.expanded = false;

        var table = byTable;
        if ( query.cost <= 1 )
          table = byTableLow;

        if ( !table[query.table] )
          table[query.table] = [];

        if ( !query.tags.includes("fuzzed_data") )
          query.costAvailable = true;

        table[query.table].push(query);
      });

      Object.keys(byTable).sort().forEach(function(table) {
        queriesByTable = queriesByTable.concat(byTable[table]);
      });
    </script>
    <script type="text/x-template" id="query-template">
      <div class="query">
        <div class="row">
          <div class="col">
            <a href="#" v-on:click="expandToggle">
              <span stlye="text-align: right">{{ expandText }}</span>
            </a>
            {{ query.table }}
          </div>
          <div class="col-6">{{ truncate(query.sql, 60) }}</div>
          <div class="col" v-html="makeURL(query.backtrace[0], shortLocation(query))"></div>
          <div class="col-1">{{ severity(query) }}</div>
        </div>
        <div class="row" v-if="expanded">
          <div class="col-12">
            <div style="border: 1px solid black; padding: 10px; margin: 20px; ">
              <pre style="white-space: pre-wrap;">{{ query.sql }}</pre>
              <div v-if="query.backtrace && query.backtrace.length > 0">
                Stack Trace:<br>
                <div v-for="backtrace in query.backtrace" v-html="makeURL(backtrace, backtrace)"></span>
              </div>
              Key: {{ castNull(query.key) }}<br>
              Possible keys: {{ castNull(query.possible_keys) }}<br>
              <div v-if="query.costAvailable">
                Cost: {{ query.cost }}<br>
              </div>
              <ul>
                <li v-for="tag in query.tags"><a href="#" v-on:click="expandInfo(tag, $event)">{{ tagTitle(tag) }}</a></li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </script>

    <div id="app">
      <v-dialog :width="600"></v-dialog>
      <div class="container" style="">
        <div class="row">
          <div class="col">Table</div>
          <div class="col-6">Query</div>
          <div class="col">Source</div>
          <div class="col-1">Severity</div>
        </div>
        <query v-for="query in queries" v-bind:query="query" v-bind:key="query.sql" v-bind:tags="tags"></query>
      </div>
    </div>

  <script>
    Vue.component('query', {
      template: '#query-template',
      props: ['query', 'tags', 'github'],
      data: function () {
        return {
          expanded: false
        };
      },
      methods: {
        truncate: function (string, len) {
          if ( string.length > len ) {
            return string.substring(0, len - 3) + "...";
          } else {
            return string;
          }
        },
        expandInfo: function(tag, event) {
          this.$modal.show('dialog', {
            title: this.tags[tag].title,
            text: this.tags[tag].description,
            buttons: [
              {
                title: 'Close'
              }
            ]
          })
          event.preventDefault();
        },
        expandToggle: function(event) {
          if (event) event.preventDefault()
          this.expanded = !this.expanded;
        },
        severity: function(query) {
          if ( query.cost > 1 )
            return "high";
          else
            return "low";
        },
        castNull: function (string) {
          if ( !string )
            return "(none)";
          else
            return string;
        },
        shortLocation: function(query) {
          if ( !query.backtrace )
            return null;
          var location = query.backtrace[0];
          return location.match(/([^\/]+:\d+):/)[1];
        },
        makeURL: function(line, content) {
          if ( !data.url )
            return content;

          var matches = line.match(/(.+):(\d+):/);
          var file = matches[1].replace(/^\/+/, '');
          var line = matches[2];

          return `<a href='${data.url}/${file}#L${line}' target='_new'>${content}</a>`;
        },
        tagTitle: function(tag) {
          if ( !this.tags[tag] )
            return tag;
          else
            return this.tags[tag].title;
        }
      },
      computed: {
        expandText: function() {
          return this.expanded ? "-" : "+";
        },
      }
    });

    var app = new Vue({
      el: '#app',
      data: {
        queries: queriesByTable,
        tags: data.tags
      },
      methods: { }
    });


    </script>
  </body>
</html>
