<html>
  <head>
    <title>Shiba results for <%= Time.now %></title>
    <link href="https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900|Material+Icons" rel="stylesheet">
  </head>
  <body>
    <% data[:js].each do |js| %>
      <% if ENV['SHIBA_DEBUG'] %>
        <script type="text/javascript" src="file://<%= js %>"></script>
      <% else %>
        <script type="text/javascript">
          <%= File.read(js) %>
        </script>
      <% end %>
    <% end %>

    <% data[:css].each do |css| %>
      <style type="text/css">
        <%= File.read(css) %>
      </style>
    <% end %>

    <script language="javascript">
      var data = <%= data.to_json %>;
      var queriesByTable = [];
      var queriesByTableLow = [];
      var queriesHaveFuzzed = false;
      var severityIndexes = { high: 1, medium: 2, low: 3 };

      function sortByFunc(fields) {
        return function(a, b) {
          for ( var i = 0 ; i < fields.length; i++ ) {
            if ( a[fields[i]] < b[fields[i]] )
              return -1;
            else if ( a[fields[i]] > b[fields[i]] )
              return 1;
          }
          return 0;
        }
      }

      function Query(obj) {
        Object.assign(this, obj);
        this.severityIndex = severityIndexes[this.severity];
        this.splitSQL();
      };

      Query.prototype = {
        hasTag: function(tag) {
          return this.tags.includes(tag);
        },
        splitSQL: function() {
          this.sqlFragments = this.sql.match(/(SELECT\s)(.*?)(\s+FROM .*)/i);
        },
        select: function () {
          return this.sqlFragments[1];
        },
        fields: function () {
          return this.sqlFragments[2];
        },
        rest: function(index) {
          return this.sqlFragments.slice(index).join('');
        }
      };

      data.queries.forEach(function(query) {
        var q = new Query(query);

        if ( q.cost < 100 ) {
          queriesByTableLow.push(q);
        } else {
          queriesByTable.push(q);
        }

        if ( q.hasTag("fuzzed_data" ) )
          queriesHaveFuzzed = true;

        q.expandSelect = false;
      });

      var f = sortByFunc(['severityIndex', 'table']);
      queriesByTable = queriesByTable.sort(f);
      queriesByTableLow = queriesByTableLow.sort(f);
    </script>

    <script type="text/x-template" id="query-template">
      <div class="query">
        <div class="row">
          <div class="col-3">
            <a href="#" v-on:click="expandToggle">
              <span stlye="text-align: right">{{ expandText }}</span>
            </a>
            {{ query.table }}
          </div>
          <div class="col-5">{{ truncate(query.sql, 50) }}</div>
          <div class="col-3" v-html="makeURL(query.backtrace[0], shortLocation(query))"></div>
          <div class="col-1">{{ query.severity }}</div>
        </div>
        <div class="row" v-if="expanded">
          <div class="col-12">
            <div class="query-info-box">
              <query-sql v-bind:query="query"></query-sql>
              <div v-if="query.backtrace && query.backtrace.length > 0">
                Stack Trace:<br>
                <div class="backtrace">
                  <div v-for="backtrace in query.backtrace" v-html="makeURL(backtrace, backtrace)"></div>
                </div>
              </div>
              <ul class="shiba-info-list">
              <li v-for="tag in query.tags">
                <component v-bind:is="'tag-' + tag" v-bind:query="query"></component>
              </li>
              </ul>
              <div v-if="!rawExpanded">
                <a href="#" v-on:click.prevent="rawExpanded = !rawExpanded">See full EXPLAIN</a>
              </div>
              <div v-else>
                <a href="#" v-on:click.prevent="rawExpanded = !rawExpanded">hide EXPLAIN</a>
                <pre class="backtrace">{{  JSON.stringify(query.raw_explain, null, 2) }}</pre>
              </div>
            </div>
          </div>
        </div>
      </div>
    </script>

    <% data[:tags].each do |tag, h| %>
    <script type="text/x-template" id="tag-<%= tag %>-template">
      <span><a class="badge shiba-badge-<%= h['level'] %>"><%= h['title'] %></a><%= h['summary'] %></span>
    </script>
    <script>
      Vue.component('tag-<%= tag %>', {
        template: '#tag-<%= tag %>-template',
        props: ['query'],
        computed: {
          key_parts: function() {
            if ( this.query.used_key_parts && this.query.used_key_parts.length > 0 )
              return this.query.used_key_parts.join(',');
            else
              return "";
          },
          formattedCost: function() {
            var costPercentage = (this.query.cost / this.query.table_size) * 100.0;
            if ( this.query.cost > 100 && costPercentage > 1 ) // todo: make better
              return `${costPercentage.toFixed()}% (${this.query.cost.toLocaleString()}) of the`;
            else
              return this.query.cost.toLocaleString();
          }
        }
      });
    </script>
    <% end %>


    <script type="text/x-template" id="sql-template">
      <div class="sql">
        <span>{{ query.select() }}</span>
        <span v-if="!expandFields && query.fields().length > 80">
          <a href="#" v-on:click.prevent="expandFields = !expandFields">...</a>
        </span>
        <span v-else>{{ query.fields() }}</span>
        <span>{{ query.rest(3) }}</span>
      </div>
    </script>

    <script>
      Vue.component('query-sql', {
        template: '#sql-template',
        props: ['query'],
        data: function () {
          return { expandFields: false }
        }
      });
    </script>

    <div id="app">
      <v-dialog :width="600"></v-dialog>
      <div class="container" style="">
        <div class="row">
          <div v-if="hasFuzzed" class="alert alert-warning" role="alert">
            This query analysis was generated using estimated table sizes.
            To improve these results and find other problem queries beyond missing indexes, we'll need more stats.<br/>
            <a target="_blank" href="https://github.com/burrito-brothers/shiba/blob/master/README.md#going-beyond-table-scans">Find out how to get a more accurate analysis by feeding Shiba index stats</a>
          </div>

          <div class="col-12">We found {{ queries.length }} queries that deserve your attention: </div>
        </div>
        <div class="row">
          <div class="col-3">Table</div>
          <div class="col-5">Query</div>
          <div class="col-3">Source</div>
          <div class="col-1">Severity</div>
        </div>
        <div class="queries">
          <query v-for="query in queries" v-bind:query="query" v-bind:key="query.sql" v-bind:tags="tags"></query>
        </div>
        <div class="row">
          <div class="col-12">We also found <a href="#" v-on:click.prevent="lowExpanded = !lowExpanded">{{ queriesLow.length }} queries</a> that look fine.</div>
        </div>
        <a name="lowExapnded"></a>
        <div class="queries" v-if="lowExpanded">
          <query v-for="query in queriesLow" v-bind:query="query" v-bind:key="query.sql" v-bind:tags="tags"></query>
        </div>
        <div style="height:50px"></div>
      </div>
    </div>

  <script>
    Vue.component('query', {
      template: '#query-template',
      props: ['query', 'tags', 'github'],
      data: function () {
        return {
          expanded: false,
          rawExpanded: false
        };
      },
      methods: {
        truncate: function (string, len) {
          if ( string.length > len ) {
            return string.substring(0, len - 3) + "...";
          } else {
            return string;
          }
        },
        expandInfo: function(tag, event) {
          this.$modal.show('dialog', {
            title: this.tags[tag].title,
            text: this.tags[tag].description,
            buttons: [
              {
                title: 'Close'
              }
            ]
          })
          event.preventDefault();
        },
        expandToggle: function(event) {
          if (event) event.preventDefault()
          this.expanded = !this.expanded;
        },
        shortLocation: function(query) {
          if ( !query.backtrace )
            return null;
          var location = query.backtrace[0];
          return location.match(/([^\/]+:\d+):/)[1];
        },
        makeURL: function(line, content) {
          if ( !data.url )
            return content;

          var matches = line.match(/(.+):(\d+):/);
          var file = matches[1].replace(/^\/+/, '');
          var line = matches[2];

          return `<a href='${data.url}/${file}#L${line}' target='_new'>${content}</a>`;
        }
      },
      computed: {
        expandText: function() {
          return this.expanded ? "-" : "+";
        }
      }
    });

    var app = new Vue({
      el: '#app',
      data: {
        queries: queriesByTable,
        queriesLow: queriesByTableLow,
        tags: data.tags,
        lowExpanded: false,
        hasFuzzed: queriesHaveFuzzed
      },
      methods: { }
    });


    </script>
  </body>
</html>
